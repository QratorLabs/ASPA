<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
        <!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
        <!ENTITY RFC8174 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8174.xml">
        <!ENTITY RFC4271 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4271.xml">
        <!ENTITY RFC6793 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6793.xml">
        <!ENTITY RFC6811 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6811.xml">
        <!ENTITY RFC8205 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8205.xml">
<!--
        <!ENTITY RFC6483 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6483.xml">
-->
        <!ENTITY RFC6811 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6811.xml">
        <!ENTITY RFC7908 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7908.xml">

<!--
        <!ENTITY RFC6472 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6472.xml">
-->
        <!ENTITY RFC6480 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6480.xml">
        <!ENTITY RFC6482 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6482.xml">
        <!ENTITY RFC5280 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml">

        <!ENTITY RFC3779 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3779.xml">
        <!ENTITY RFC9234 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.9234.xml">
        <!ENTITY RFC9319 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.9319.xml">
        <!ENTITY RFC7942 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7942.xml">

<!ENTITY I-D.ietf-grow-route-leak-detection-mitigation SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-grow-route-leak-detection-mitigation.xml">

<!ENTITY I-D.ietf-sidrops-aspa-profile SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-sidrops-aspa-profile.xml">
<!--
        <!ENTITY I-D.ietf-idr-deprecate-as-set-confed-set SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-idr-deprecate-as-set-confed-set.xml">
-->
        ]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="std" docName="draft-ietf-sidrops-aspa-verification-12" ipr="trust200902">
  <front>

    <title abbrev="ASPA-based AS_PATH Verification">
      BGP AS_PATH Verification Based on Autonomous System Provider Authorization (ASPA) Objects
    </title>
    <author fullname="Alexander Azimov" initials="A." surname="Azimov">
      <organization showOnFrontPage="true">Yandex</organization>
      <address>
        <postal>
          <street>Ulitsa Lva Tolstogo 16</street>
          <city>Moscow</city>
          <code>119021</code>
          <country>Russian Federation</country>
        </postal>
        <email>a.e.azimov@gmail.com</email>
      </address>
    </author>
    <author fullname="Eugene Bogomazov" initials="E." surname="Bogomazov">
      <organization showOnFrontPage="true">Qrator Labs</organization>
      <address>
        <postal>
          <street>1-y Magistralnyy tupik 5A</street>
          <city>Moscow</city>
          <code>123290</code>
          <country>Russian Federation</country>
        </postal>
        <email>eb@qrator.net</email>
      </address>
    </author>
    <author fullname="Randy Bush" initials="R." surname="Bush">
      <organization abbrev="IIJ &amp; Arrcus" showOnFrontPage="true">Internet Initiative Japan &amp; Arrcus, Inc.</organization>
      <address>
        <postal>
          <street>5147 Crystal Springs</street>
          <city>Bainbridge Island</city>
          <region>Washington</region>
          <code>98110</code>
          <country>United States of America</country>
        </postal>
        <email>randy@psg.com</email>
      </address>
    </author>
    <author fullname="Keyur Patel" initials="K." surname="Patel">
      <organization showOnFrontPage="true">Arrcus</organization>
      <address>
        <postal>
          <street>2077 Gateway Place</street>
          <street>Suite #400</street>
          <city>San Jose</city>
          <region>CA</region>
          <code>95119</code>
          <country>United States of America</country>
        </postal>
        <email>keyur@arrcus.com</email>
      </address>
    </author>
    <author fullname="Job Snijders" initials="J." surname="Snijders">
      <organization showOnFrontPage="true">Fastly</organization>
      <address>
        <postal>
          <street/>
          <code/>
          <city>Amsterdam</city>
          <country>Netherlands</country>
        </postal>
        <email>job@fastly.com</email>
      </address>
    </author>
    <author fullname="Kotikalapudi Sriram" initials="K." surname="Sriram">
      <organization abbrev="USA NIST" showOnFrontPage="true">USA National Institute of Standards and Technology</organization>
      <address>
        <postal>
          <street>100 Bureau Drive</street>
          <city>Gaithersburg</city>
          <region>MD</region>
          <code>20899</code>
          <country>United States of America</country>
        </postal>
        <email>ksriram@nist.gov</email>
      </address>
    </author>

    <date />

    <keyword>BGP</keyword>
    <keyword>Route leak</keyword>
    <keyword>Hijacks</keyword>

    <abstract>
      <t>
        This document describes procedures that make use of Autonomous System Provider Authorization (ASPA) objects in the Resource Public Key Infrastructure (RPKI) to verify the Border Gateway Protocol (BGP) AS_PATH attribute of advertised routes.
        This type of AS_PATH verification is primarily intended for detection and mitigation of route leaks.
        It also to some degree provides protection against forged-origin prefix hijacks.
      </t>
    </abstract>

    <note title="Requirements Language">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 <xref target="RFC2119" /> <xref target="RFC8174" /> when, and only when, they appear in all capitals, as shown here.
      </t>
    </note>
  </front>

  <middle>

    <section title="Introduction" anchor="intro">
      <t>
        The Border Gateway Protocol (BGP) as originally designed is known to be vulnerable to prefix (or route) hijacks and BGP route leaks <xref target="RFC7908"/>.   
        Some existing BGP extensions are able to partially solve these problems. For example, RPKI-based route origin validation (RPKI-ROV) <xref target="RFC6480"/> <xref target="RFC6482"/>  <xref target="RFC6811"/> <xref target="RFC9319"/> can be used to detect and filter accidental mis-originations. <xref target="RFC9234"/> or <xref target="I-D.ietf-grow-route-leak-detection-mitigation"/> can be used to detect and mitigate accidental route leaks. While RPKI-ROV can prevent accidental prefix hijacks, malicious forged-origin prefix hijacks can still occur <xref target="RFC9319"/>. RFC9319 includes some recommendations for reducing the attack surface for forged-origin prefix hijacks.   
      </t>
      <t>
        This document describes procedures that make use of Autonomous System Provider Authorization (ASPA) objects <xref target="I-D.ietf-sidrops-aspa-profile"/> in the Resource Public Key Infrastructure (RPKI) to verify the Border Gateway Protocol (BGP) AS_PATH attribute of advertised routes. 
	These new ASPA-based procedures automatically detect invalid AS_PATHs in announcements that are received from customers, lateral peers (defined in <xref target="RFC7908"/>), transit providers, Route Servers (RSes), and RS-clients.
        This type of AS_PATH verification is primarily intended for detection and mitigation of route leaks and improbable AS paths.
        It also to some degree provides protection against forged-origin prefix hijacks. 
	The procedures are based on cryptographic techniques (ASPA and RPKI) and hence the protections work to a reasonable degree in both accidental and malicious scenarios.
      </t>
      <t>
	ASPA objects are cryptographically signed registrations of customer-to-provider relationships and stored in a shared database <xref target="I-D.ietf-sidrops-aspa-profile"/>. 
	ASPA-based path verification is an incrementally deployable technique and provides benefits to early adopters in the context of limited deployment.
      </t>
      <t>
	The procedures described in this document are applicable only for the address families AFI 1 (IPv4) and AFI 2 (IPv6) with SAFI 1 (unicast) in both cases <xref target="IANA-AF"/>.     
      </t>

    <section title="Anomaly Propagation" anchor="propagation">
      <t>
        Both route leaks and hijacks have similar effects on ISP operations - they redirect traffic which can result in denial of service (DoS), eavesdropping, increased latency, and packet loss.
        But the level of risk depends significantly on the extent of propagation of the anomalies.
        For example, a route leak or hijack that is propagated only to customers may cause bottlenecking within a particular ISP's customer cone, but if the anomaly propagates through lateral (i.e., non-transit) peers and transit providers, or reaches global distribution through transit-free networks, then the ill effects will likely be amplified and experienced across continents.
      </t>
      <t>
        The ability to constrain propagation of BGP anomalies to transit providers and lateral peers - without requiring support from the source of the anomaly (which is critical if the source has malicious intent) - should significantly improve the security of the global inter-domain routing system.
      </t>
   </section>
    </section>

    <section title="Autonomous System Provider Authorization" anchor="ASPA">
      <t>
        An ASPA record is a digitally signed object that binds, for a selected Address Family Identifier (AFI), a set of Provider AS numbers to a Customer AS number (CAS) (in terms of BGP announcements, not business relationship) and is signed by the CAS.
        It attests that the CAS has a Set of Provider ASes (SPAS) as specified in the ASPA. The definition of Provider AS in given in Section 1 of <xref target="I-D.ietf-sidrops-aspa-profile"/>. 
	A function of a Provider AS is to propagate a Customer AS's IPv4 or IPv6 announcements onward, i.e., to the Provider's upstream providers, lateral peers, or customers. 
	Another function is to offer outbound (customer to Internet) data traffic connectivity to the Customer. 
        The ASPA object profile is described in <xref target="I-D.ietf-sidrops-aspa-profile"/>.
      </t>
      <t>
        In this document, the notation (AS1, [AS2,...], AFI) is used to represent the ASPA object for a CAS denoted as AS1 in the selected AFI. 
	In this example, AS2 and any other ASes listed in the square brackets represent the transit provider ASes attested by the CAS (i.e., AS1). A CAS is expected to register a single ASPA listing all its Provider ASes (see <xref target="rec1"/>). 
	If a CAS has a single ASPA, then the SPAS for the CAS are the Provider ASes listed in that ASPA. 
	In case a CAS has multiple ASPAs, then the SPAS is the union of the Provider ASes listed in all ASPAs of the CAS.
      </t>
      <t>
	Verified ASPA Payload (VAP) refers to the payload in a cryptographically verified (i.e., X.509 valid <xref target="RFC3779"/> <xref target="RFC5280"/>) ASPA object. 
	In the procedures described in this document, only the SPAS derived from the VAP(s) of each CAS are considered for the AS path validation.
      </t>
    </section>
      <section title="ASPA Registration Recommendations" anchor="rec1">
        <t>
        A CAS MUST register each of its transit provider ASes in its ASPA object(s).
        A network operator SHOULD register all its providers in a single ASPA object.
	An AS that is an RS-client of a non-transparent IXP RS AS MUST include the AS number (ASN) of the RS AS in its SPAS.
	  </t>
        <t>
        An ASPA (AS, [0], AFI) showing AS 0 as the provider is referred to as an AS0 ASPA. Registration of an ASPA with the SPAS containing only AS 0 is a statement by the registering AS that it has no transit providers.
        A non-transparent RS AS MUST register an AS0 ASPA.

<!-- [sriram] Should we require even a transparent AS to register as AS0 ASPA. Could it have any diagnostic value? -->
 
        The so-called "Tier-1" ASes do not have transit providers. A Tier-1 AS MUST register an ASPA with SPAS including AS 0 and any transparent IXP RS ASes at which it is an RS-client.  
	An AS (non-Tier-1) that is an RS-client of a non-transparent IXP RS AS MUST include the ASN of the RS AS in its SPAS.
	An AS (non-Tier-1) that is an RS-client of a transparent IXP RS AS MUST register an ASPA including all its transit provider ASes in its SPAS but need not include the transparent RS AS in the SPAS, such inclusion is OPTIONAL.  
	</t>
	<t>
	It is thought to be unlikely that there could be an AS that is not Tier-1 and does not have any transit providers. However, if there exists such an AS, it MUST register an ASPA with SPAS including AS 0 and any transparent IXP RS ASes at which it is an RS-client.
        </t>
        <t>
        If AS 0 exists in the SPAS of an ASPA along with some provider ASes, then the presence of the AS 0 has no effect on the AS_PATH verification procedures.
        The verification procedures simply consider the other (distinct from AS 0) provider ASes as the authorized transit providers of the CAS in consideration.
        </t>
        <t>
	A pair of ASes can have a sibling relationship (each AS considers the other as a customer), i.e., the customer-to-provider relationship applies in both directions. In such cases, each of the two ASes MUST register its ASPA including the other (sibling) AS in its SPAS.  
        </t>
      </section>

    <section title="Hop-Check Function" anchor="pair-validation">
      <t>
        Let AS(i) and AS(j) represent adjacent unique ASes in an AS_PATH, and thus (AS(i), AS(j)) represents an AS hop.   
	A hop-check function, hop(AS(i), AS(j), AFI), checks if the ordered pair of ASNs, (AS(i), AS(j)), has the property that AS(j) is an attested provider of AS(i) per SPAS corresponding to AS(i)'s ASPA for the specified AFI.
	This function is specified as follows:
      </t>
      <t>
        <figure anchor="fig1" align="left" suppress-title="true" pn="figure-1">
          <name slugifiedName="HFC-illustration">Hop Check Function.</name>
          <artwork align="left" name="" type="" alt="">

                          /
                          | "Provider" if AS(i)'s SPAS 
                          |   includes AS(j) 
                          | 
hop(AS(i), AS(j), AFI) =  / "Not Provider" if AS(i)'s SPAS 
                          \   does not include AS(j)  
                          |
                          | "no Attestation" if AS(i) does not 
                          |  have ASPA (i.e., VAP)  
                          \
</artwork>
        </figure>
       </t>
      <t>
	The hop-check function is AFI dependent because an AS may have different SPAS for different AFI. 
	This function is used in the ASPA-based AS_PATH validation (route leak detection) algorithms described in <xref target="Upflow"/> and <xref target="Downflow"/>.
	While describing the algorithms, for simplicity, the function hop(AS(i), AS(j), AFI) is replaced with hop(AS(i), AS(j)) by dropping the AFI since it would be understood that the algorithms are run for a specific AFI at a time (AFI = 1 or AFI = 2). 
       </t>
    </section>
 
    <section title="AS_PATH Verification" anchor="verif">
      <t>
	The procedures described in this document are applicable only to four-octet AS number compatible BGP speakers <xref target="RFC6793"/>. 
	If such a BGP speaker receives both AS_PATH and AS4_PATH attributes in an UPDATE, then the procedures are applied on the reconstructed AS path (Section 4.2.3 of <xref target="RFC6793"/>). 
	So, the term AS_PATH is used in this document to refer to the usual AS_PATH <xref target="RFC4271"/> as well as the reconstructed AS path (the latter in instances when reconstruction is performed).
      </t>
      <t>
	If an attacker creates a route leak intentionally, they may try to strip their AS from the AS_PATH. 
	To partly guard against that, a check is necessary to match the most recently added AS in the AS_PATH to the BGP neighbor's ASN. 
	This check MUST be performed as specified in Section 6.3 of <xref target="RFC4271"/>. 
	If the check fails, then the AS_PATH is considered a Malformed AS_PATH and the UPDATE is considered to be in error (Section 6.3 of <xref target="RFC4271"/>). 
	The case of transparent RS MUST also be appropriately taken care of (e.g., by suspending the neighbor ASN check). Note that the check fails also when the AS_PATH is empty (zero length) and that is appropriate. 
	These checks are commonly a part of commercial BGP implementations and support the AS path validation procedures in this document.   
      </t>
	 <t>
	Wherever AFI is mentioned in the AS_PATH validation algorithms, it refers to the AFI of the prefix in the route for which the AS_PATH validation is performed. 
	When an AS_PATH is evaluated as Valid, Invalid, or Unknown, it pertains only to the AFI for which the validation was performed. 
	The same AS_PATH can have a different validation outcome for a different AFI.
	Since it is understood that the algorithms described here are run for a single AFI at a time (pertaining to the route(s) being verified), the AFI in the function hop(AS(i), AS(j), AFI) is not shown explicitly for simplicity for the reader.     
      </t>
      <section title="Algorithm for Upstream Paths" anchor="Upflow">
<t>
	The upstream verification algorithm described here is applied when a route is received from a customer or lateral peer, or received by an RS from an RS-client, or received by an RS-client from an RS.
</t>
<t>
	The basic principles of the upstream verification algorithm are stated here.  
	Let the sequence {AS(N), AS(N-1),..., AS(2), AS(1)} represent the AS_PATH in terms of unique ASNs, where AS(1) is the origin AS and AS(N) is the most-recently added AS and neighbor of the receiving/validating AS. 
	For each hop AS(i-1) to AS(i)in this sequence, the hop-check function, hop(AS(i-1), AS(i)), must equal "Provider" (<xref target="pair-validation"/>) for the AS_PATH to be Valid . 
	If the hop-check function for at least one of those hops is "Not-Provider", then the AS_PATH would be Invalid. 
	If the AS_PATH verification outcome is neither Valid nor Invalid (per above principles), then it would be evaluated as Unknown.
        </t>
        <t>
          The upstream path verification procedure is specified as follows:
        </t>
        <t>
          <list style="numbers">
            <t>
              If the AS_PATH has an AS_SET, then the procedure halts with the outcome "Invalid".
            </t>
            <t>
	Collapse prepends in the AS_SEQUENCE(s) in the AS_PATH (i.e., keep only the unique AS numbers). 
	Let the resulting ordered sequence be represented by {AS(N), AS(N-1), ..., AS(2), AS(1)}, where AS(1) is the first-added (i.e., origin) AS and AS(N) is the last-added AS and neighbor to the receiving/validating AS.
            </t>
            <t>  
	If N = 1, then then the procedure halts with the outcome "Valid". 
	Else, continue. 
            </t>
            <t>  
	At this step, N &ge; 2. For 2 &le; i &le; N, if there is an i for which hop(AS(i-1), AS(i)) = "not Provider", then the procedure halts with the outcome "Invalid". 
	Else, continue.
            </t>
            <t>  
	For 2 &le; i &le; N, if there is an i for which hop(AS(i-1), AS(i)) = "no Attestation", then the procedure halts with the outcome "Unknown". 
	Else, the procedure halts with the outcome "Valid". 
            </t>
          </list>
        </t>      
      
      <section title="About Path Validation at IXP RS AS and RS-Client" anchor="RS-client">
	<t>
	As stated above (top of <xref target="Upflow"/>), the algorithm for upstream paths is applied for path validation at IXP RS AS and RS-clients. 
	The justifications are as follow. 
	The RS-client to RS AS relationship is effectively a customer-to-provider relationship.
	The RS AS propagates the routes of an RS-client and its customers to other RS-clients. 
	An RS-client at a transparent RS effectively has a lateral peer relationship with other RS-clients that it connects to via the RS. 
	So, the algorithm for upstream paths clearly applies at an RS AS and at RS-clients of a transparent RS.
        </t>
        <t>
	Since an RS AS (transparent or non-transparent) does not have providers or lateral peers, an RS-client of a non-transparent RS expects an AS_PATH it receives to be consisting of only customer-to-provider hops successively from AS(1) (origin) the AS(N) (neighbor which is the RS AS). 
	This expectation is identical to what is expected when the UPDATE is received from a customer or lateral peer. 
	Hence, the algorithm for upstream paths applies also at an RS-client of a non-transparent RS.  
	</t>
      </section>
      </section>
      <section title="Algorithm for Downstream Paths" anchor="Downflow">
        <t>
          The downstream verification algorithm described here is applied when a route is received from a transit provider. 
        </t>
        <t>
It is not essential, but the reader may take a look at the illustrations and formal proof in <xref target="sriram1"/> to develop a clearer understanding of the algorithm described here.
        </t>
        <t>
	Here again (as in <xref target="Upflow"/>), let the AS_PATH be simplified and represented by the ordered sequence of unique ASNs as {AS(N), AS(N-1),..., AS(2), AS(1)}.
        </t>
        <t>
	If the AS_PATH is empty or it has an AS_SET, then the AS_PATH is Invalid. 
	If there is no AS_SET in the AS_PATH and N &lt;= 2, then the AS_PATH is trivially Valid. 
        </t>
        <t>
	In the following descriptions regarding determination of Invalid, Valid, or Unknown, it is assumed that the AS_PATH contains no AS_SETs and contains 3 or more unique ASNs (N >= 3).  
        </t>
        <t>
	<strong>Determination of Invalid AS_PATH:</strong> 
        </t>
        <t>
	Given the above ordered sequence, if there exist indices u and v such that (1) u &lt;= v, (2) hop(AS(u-1), AS(u)) = "not Provider", and (3) hop(AS(v+1), AS(v)) = "not Provider", then the AS_PATH is Invalid.   
        </t>
        <t>
	<strong>Determination of Valid AS_PATH:</strong> 
        </t>
        <t>
	As shown in <xref target="fig2"/>, assume that the ASes in the AS_PATH are in the same physical (locational) order as in the sequence representation {AS(N), AS(N-1),..., AS(2), AS(1)}, i.e., AS(N) is the left most and AS(1) the right most. 
        </t>

<t>
        <figure anchor="fig2" align="left" suppress-title="false" pn="figure-2">
          <name slugifiedName="ramp-illustration">Illustration of up-ramp and down-ramp. </name>
          <artwork align="left" name="" type="" alt="">

                    AS(L) ............. AS(K) 
                     /                     \
                 AS(L+1)                  AS(K-1)
                    .                       .        
                   .                         .        
    (down-ramp)   .                           .   (up-ramp)
                 .                             .        
                .                               .
              AS(N-1)                          AS(2)
                /                                \
             AS(N)                               AS(1)
              /                                (Origin AS)
    Receiving &amp; Validating AS                    
               
        Each ramp has consecutive ASPA-attested 
        customer-to-provider hops in the bottom-to-top direction

</artwork>
        </figure>
</t>

        <t>
Looking at <xref target="fig2"/>, the UPDATE is received from a provider (i.e., AS(N) is a provider), it may have both an up-ramp (on the right starting at AS(1)) and a down-ramp (on the left ending at AS(N)).  
	An explanation of what the ramps mean is as follows. 
	The sequence of ASes in either of these ramps is ASPA Valid. 	The up-ramp starts at AS(1) and each AS hop, (AS(i), AS(i+1)), in it has the property that hop(AS(i), AS(i+1)) = "Provider" for i = 1, 2,... , K-1. 
	If such a K does not exist, then K is set to 1. 
	The up-ramp ends (reaches its apex) at AS(K) because hop(AS(K), AS(K+1)) = "Not Provider" or "no Attestation". 
	The down-ramp ends at AS(N) and each AS hop, (AS(i), AS(i-1)), in it has the property that hop(AS(i), AS(i-1)) = "Provider" for i = N, N-1,... , L+1. 
	If such an L does not exist, then L is set to N. 
	The down-ramp starts at AS(L) because hop(AS(L), AS(L-1)) = "Not Provider" or "no Attestation". Thus, the apex of the down-ramp is AS(L).  
         </t>
         <t>
	If there is an up-ramp that runs across all ASes in the AS_PATH (i.e., K = N), then clearly the AS_PATH is Valid (i.e., not a route leak).
	Similarly, if there is a down-ramp that runs across all ASes in the AS_PATH (i.e., L = 1), then also the AS_PATH is valid (i.e., not a route leak). 
 	However, if both ramps exist in an AS_PATH with K &lt; N and L > 1, then the AS_PATH is Valid if and only if L-K &lt;= 1. 
	Note that K could be greater than L (i.e., L-K has a negative value) which means that the up-ramp and down-ramp
	overlap, and that could happen when some adjacent AS pairs in the AS_PATH have mutually registered sibling relationships  
	(i.e., include each other in their respective SPAS) (see <xref target="rec1"/>).
	If L-K = 0, it means that the apexes of the up-ramp and down-ramp are at the same AS. 
	If L-K = 1, it means that the apexes are at adjacent ASes.
	In summary, the AS_PATH is Valid if L-K is 0 or 1 or has a negative value.   
        </t>
        <t>

	<strong>Determination of Unknown AS_PATH:</strong> 
        </t>
        <t>
	If L-K >= 2, then the AS_PATH is either Invalid (route leak) or Unknown (see illustrations and proof in <xref target="sriram1"/>). However, if L-K >= 2 and an Invalid outcome was not found by the process described earlier in this section, then the AS_PATH is determined to be Unknown.   
</t>

        <t>
          The downstream path verification procedure is formally specified as follows:
            </t>
            <t>
          <list style="numbers">
            <t>
              If the AS_PATH has an AS_SET, then the procedure halts with the outcome "Invalid".
            </t>
            <t>
	Collapse prepends in the AS_SEQUENCE(s) in the AS_PATH (i.e., keep only the unique AS numbers). 
	Let the resulting ordered sequence be represented by {AS(N), AS(N-1), ..., AS(2), AS(1)}, where AS(1) is the first-added (i.e., origin) AS and AS(N) is the last-added AS and neighbor to the receiving/validating AS.
            </t>
            <t>  
	If N &le; 2, then the procedure halts with the outcome "Valid". 
	Else, continue. 
            </t>
            <t> 
	At this step, N &ge; 3. Given the above ordered sequence, find the lowest value of i (2 &le; i &le; N) for which hop(AS(i-1), AS(i)) = "not Provider". Call it u_min. 
	If no such u_min exists, set u_min = N+1.
	Find the highest value of j (N-1 &ge; j &ge; 1) for which hop(AS(j+1), AS(j)) = "not Provider". Call it v_max. 
	If no such v_max exists, then set v_max = 0.
	If u_min &le; v_max, then the procedure halts with the outcome "Invalid". 
	Else, continue.
            </t>
            <t>
	Up-ramp: For 2 &le; i &le; N, determine the largest p such that hop(AS(i-1), AS(i)) = "Provider" for each i in the range 2 &le; i &le; p. Call such largest p as K.  
	If such largest p does not exist, then set K = 1.
            </t>
            <t>
	If K = N, then the procedure halts with the outcome "Valid".
	Else, continue.
            </t>
            <t>
	Down-ramp: For N-1 &ge; j &ge; 1, determine the smallest q such that hop(AS(j+1), AS(j)) = "Provider" for each j in the range N-1 &ge; j &ge; q. Call such largest q as L.   
	If such smallest q does not exist, then set L = N. 
            </t>
            <t>
	If L-K &le; 1, then the procedure halts with the outcome "Valid".
	Else, the procedure halts with the outcome "Unknown".
            </t>
          </list>
        </t>
      </section>
      </section>

      <section title="AS_PATH Verification Recommendation" anchor="rec2">

        <t>
A compliant AS MUST apply upstream and downstream procedures producing AS_PATH validation outcomes as specified in <xref target="Upflow"/> and <xref target="Downflow"/>, respectively, though the implementation details of the algorithms may differ.    
        </t>
        <t>
The procedures described in this document are applicable only for the address families AFI 1 (IPv4) and AFI 2 (IPv6) with SAFI 1 (unicast) in both cases <xref target="IANA-AF"/>. The procedures MUST NOT be applied to other address families by default. 
        </t>
      </section>

      <section title="Mitigation" anchor="mitig">
        <t>
          If the AS_PATH is determined to be Invalid based on the verification procedures specified above (<xref target="Upflow"/>, <xref target="Downflow"/>), then the route MUST be rejected.
        </t>
        <t>
          The ASPA-based path verification procedures are able to check routes received from customers, lateral peers, transit providers, RSes, and RS-clients.
          These procedures combined with BGP Roles <xref target="RFC9234" /> and RPKI-ROV <xref target="RFC6811"/> <xref target="RFC9319"/> can provide a fully automated solution to detect and filter hijacks and route leaks, including malicious ones. 
	The ASPA-based mechanism also detects and mitigates a majority of forged-origin hijacks, especially those in UPDATEs received from customers and lateral peers. 
	Forged-origin hijacks received from providers are detected and mitigated to a lesser degree.  
        </t>
    </section>

    <section title="Operational Considerations">

    <section title="Mutual Transit (Complex Relations)" anchor="Complex">
      <t>
        There are peering relationships which cannot be described as strictly simple peer-to-peer (i.e., lateral peers) or customer-to-provider. An example is when both parties (ASes) consider each other as a customer, i.e., the customer-to-provider relationship applies in each direction. 
	That is called a sibling relationship, and in such cases, each AS must register an ASPA including the other AS in its SPAS (see <xref target="rec1"/>.  
      </t>
    </section>

    <section title="AS Confederations" anchor="confed">
      <t>
	The ASes on the boundary of an AS Confederation MUST register ASPAs using the Confederation's global ASN and the procedures for ASPA-based AS_PATH validation in this document are NOT RECOMMENDED for use on eBGP links internal to the Confederation.
      </t>
    </section>
    </section>
    <section title="Comparison to Other Technologies">
      <section title="BGPsec">
        <t>
        BGPsec <xref target="RFC8205"/> was designed to solve the problem of AS_PATH validation by including cryptographic signatures in BGP Update messages.
	It offers protection against unauthorized path modifications and assures that the BGPsec Update actually traveled the path shown in the BGPsec_PATH Attribute. 
	However, it does not detect route leaks (valley-free violations). 
	In comparison, the ASPA-based path validation described in this document detects if the AS path is improbable and focuses on detecting route leaks (including malicious cases) and forged-origin hijacks.
        </t>
        <t>
	BGPsec and ASPA are complementary technologies.        
        </t>
      </section>
      <section title="Peerlock">
        <t>
        The Peerlock mechanism <xref target="Peerlock"/> <xref target="Flexsealing"/> has a similar objective as the APSA-based route leak protection mechanism described in this document.
        It is commonly deployed by large Internet carriers to protect each other from route leaks.
        Peerlock depends on a laborious manual process in which operators coordinate the distribution of unstructured Provider Authorizations through out-of-band means in a many-to-many fashion.
        On the other hand, ASPA's use of the RPKI allows for automated, scalable, and ubiquitous deployment, making the protection mechanism available to a wider range of network operators.
        </t>
        <t>
        The ASPA mechanism implemented in router code (in contrast to Peerlock's AS_PATH regular expressions) also provides a way to detect anomalies propagated from transit providers and IX route servers.
        ASPA is intended to be a complete solution and replacement for existing Peerlock deployments.
      </t>
    </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t> This document includes no request to IANA. </t>
    </section>


    <section anchor="Security" title="Security Considerations">
      <t>
        The proposed mechanism is compatible only with BGP implementations that can process 32-bit ASNs in the AS_PATH.
        This limitation should not have a real effect on operations since legacy BGP routers are rare and it is highly unlikely that they support integration with the RPKI.
      </t>
<!-- [sriram} the following para resulted from discussion with Jeff -->
<t>
        ASPA issuers should be aware of the implications of the ASPA-based AS path validation. 
	A customer AS must keep its ASPA objects correct and current (unexpired). 
	Otherwise, for example, if a provider AS is left out of the Set of Provider ASes (SPAS) in the ASPA, then routes containing the customer AS and said provider AS may be incorrectly labeled as route leaks and rejected.
</t>
      <t>
        It is highly recommended that a compliant AS should maintain a single ASPA object that covers all its providers.
        Such a practice will help prevent race conditions during ASPA updates that might affect prefix propagation.
        The software that provides hosting for ASPA records SHOULD support enforcement of this practice.
        During a transition process between different certificate authority (CA) registries, the ASPA records SHOULD be kept identical in all registries.
      </t>

      <t>
        While the ASPA-based mechanism is able to generally detect both mistakes and malicious activity affecting routes received from customers, RS-clients, or lateral peers, it might fail to detect some malicious path modifications for routes that are received from transit providers (see <xref target="mitig"/>).
      </t>

      <t>
	Since an upstream provider becomes a trusted point, in theory it might be able to propagate without detection some instances of hijacked prefixes of its customers or routes with malformed or manipulated AS_PATHs.
        While it may happen in theory, it does not seem to be a realistic scenario. 
	Normally a customer and its transit provider would have a signed agreement, and a policy violation (of the above kind) should have legal consequences or the customer can just drop the relationship with such a provider and remove the corresponding ASPA record.
      </t>
    </section>

    <section removeInRFC="true">
      <name>Implementation Status</name>
      <t>
        This section records the status of known implementations of the protocol defined by this specification at the time of posting of this Internet-Draft. The inclusion of this section here follows the process described in <xref target="RFC7942"/>.
        The description of implementations in this section is intended to assist the IETF in its decision processes in progressing drafts to RFCs.
        Please note that the listing of any individual implementation here does not imply endorsement by the IETF.
        Furthermore, no effort has been spent to verify the information presented here that was supplied by IETF contributors.
        This is not intended as, and must not be construed to be, a catalog of available implementations or their features.
        Readers are advised to note that other implementations may exist.
      </t>
      <t>
        According to <xref target="RFC7942"/>, "this will allow reviewers and working groups to assign due consideration to documents that have the benefit of running code, which may serve as evidence of valuable experimentation and feedback that have made the implemented protocols more mature.
        It is up to the individual working groups to use this information as they see fit".
      </t>
      <t>
      <ul>
        <li>
          A BGP implementation <xref target="bgpd">OpenBGPD</xref> (version 7.8 and higher), written in C, was provided by Claudio Jeker, Theo Buehler, and Job Snijders.
        </li>
        <li>
	The implementation NIST-BGP-SRx <xref target="BGP-SRx"/> is a software suite which provides a validation engine (BGP-SRx) and a Quagga-based BGP router (Quagga-SRx). 
	It includes unit test cases for testing the ASPA-based path validation. 
	It was provided by Oliver Borchert, Kyehwan Lee, and their colleagues at US NIST. 
	It requires some additional work to incorporate the latest changes in the draft specifications related to IXP RS AS and RS-client.
        </li>
      </ul>
      </t>
    </section>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>
        The authors wish to thank Jakob Heitz, Ben Maddison, Jeff Haas, Nick Hilliard, Claudio Jeker, Shunwan Zhuang, Doug Montgomery, Rich Compton, Andrei Robachevsky, and Iljitsch van Beijnum for comments, suggestions, and discussion on the path verification procedures or the text in the document. 
	For the implementation and testing of the procedures in the document, the authors wish to thank Claudio Jeker and Theo Buehleras <xref target="bgpd"/> as well as Kyehwan Lee and Oliver Borchert <xref target="BGP-SRx"/>.
      </t>
    </section>

  </middle>
  <back>
    <references title="Normative References">
      &RFC2119;
      &RFC6480;
      &RFC6482;
      &RFC6811;
      &RFC4271;
      &RFC6793;
      &RFC7908;
      &RFC8174;
      &I-D.ietf-sidrops-aspa-profile;
    </references>

    <references title="Informative References">
      &RFC3779;
      &RFC5280;
      <!-- &RFC6472; -->
      &RFC8205;
      <!-- &RFC6483; -->
      &RFC7942;
      &RFC9234;
      &RFC9319;
	
      &I-D.ietf-grow-route-leak-detection-mitigation;
      <!-- &I-D.ietf-idr-deprecate-as-set-confed-set; -->
      <reference anchor="Peerlock" target="https://www.nanog.org/sites/default/files/Snijders_Everyday_Practical_Bgp.pdf">
        <front>
          <title>Peerlock</title>
          <author fullname="Job Snijders" initials="J." surname="Snijders">
            <organization abbrev="NTT">NTT Communications</organization>
          </author>
          <date month="June" year="2016"/>
        </front>
      </reference>
      <reference anchor="Flexsealing" target="https://arxiv.org/pdf/2006.06576.pdf">
        <front>
          <title>Flexsealing BGP Against Route Leaks: Peerlock Active Measurement and Analysis</title>
          <author fullname="Tyler McDaniel" initials="T." surname="McDaniel">
            <organization>University of Tennesse</organization>
          </author>
          <author fullname="Jared M. Smith" initials="J." surname="Smith">
            <organization>University of Tennesse</organization>
          </author>
          <author fullname="Max Schuchard" initials="M." surname="Schuchard">
            <organization>University of Tennesse</organization>
          </author>
          <date month="November" year="2020"/>
        </front>
      </reference>
        <reference anchor="sriram1" target="https://datatracker.ietf.org/meeting/110/materials/slides-110-sidrops-sriram-aspa-alg-accuracy-01">       
            <front>
                <title>On the Accuracy of Algorithms for ASPA Based Route Leak Detection</title>
                <author initials="K." surname="Sriram"><organization /></author>
                <author initials="J." surname="Heitz"><organization /></author>
                <date year="" />
            </front>
            <seriesInfo name="IETF SIDROPS Meeting," value="Proceedings of the IETF 110, March 2021" />
        </reference>
<!--
        <reference anchor="sriram2" target="https://datatracker.ietf.org/meeting/113/materials/slides-113-sidrops-aspa-verification-procedures-01">       
            <front>
                <title>ASPA Verification Procedures: Enhancements and RS Considerations</title>
                <author initials="K." surname="Sriram"><organization /></author>
                <date year="" />
            </front>
            <seriesInfo name="IETF SIDROPS Meeting," value="Proceedings of the IETF 113, March 2022" />
        </reference>
-->
      <reference anchor="IANA-AF" target="https://www.iana.org/assignments/address-family-numbers/address-family-numbers.xhtml" quote-title="true">
        <front>
          <title>Address Family Numbers</title>
          <author>
            <organization>IANA</organization>
          </author>
          <date/>
        </front>
        <!-- <seriesInfo name="Reachable from" value="http://www.iana.org/numbers.html"/> -->
            </reference>

      <reference anchor="bgpd" target="http://www.openbgpd.org/">
        <front>
          <title>OpenBGPD</title>
          <author initials="C." surname="Jeker">
            <organization>OpenBSD</organization>
          </author>
          <date/>
        </front>
      </reference>

        <reference anchor="BGP-SRx" target="https://www.nist.gov/services-resources/software/bgp-secure-routing-extension-bgp-srx-software-suite">       
            <front>
                <title>BGP Secure Routing Extension (BGP-SRx) Software Suite</title>
          <author>
            <organization>NIST</organization>
          </author>
            </front>
            <seriesInfo name="NIST Open-Source Software" value=""  />
        </reference>

    </references>
  </back>
</rfc>
